{"ast":null,"code":"var _jsxFileName = \"/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/src/components/pages/p2ptest.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useReducer } from 'react';\nimport Gun from 'gun'; // initialize gun locally\n\nconst gun = Gun({\n  peers: ['http://localhost:3030/gun']\n}); // create the initial state to hold the messages\n\nconst initialState = {\n  messages: []\n}; // Create a reducer that will update the messages array\n\nfunction reducer(state, message) {\n  return {\n    messages: [message, ...state.messages]\n  };\n}\n\nimport NavBar from \"../parts/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PeerToPeer = () => {\n  _s();\n\n  /// the form state manages the form input for creating a new message\n  const [formState, setForm] = useState({\n    name: '',\n    message: ''\n  }); // initialize the reducer & state for holding the messages array\n\n  const [state, dispatch] = useReducer(reducer, initialState); // when the app loads, fetch the current messages and load them into the state\n  // this also subscribes to new data as it changes and updates the local state\n\n  useEffect(() => {\n    const messages = gun.get('messages');\n    messages.map().on(m => {\n      dispatch({\n        name: m.name,\n        message: m.message,\n        createdAt: m.createdAt\n      });\n    });\n  }, []); // set a new message in gun, update the local state to reset the form field\n\n  function saveMessage() {\n    const messages = gun.get('messages');\n    messages.set({\n      name: formState.name,\n      message: formState.message,\n      createdAt: Date.now()\n    });\n    setForm({\n      name: '',\n      message: ''\n    });\n  } // update the form state as the user types\n\n\n  function onChange(e) {\n    setForm({ ...formState,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 30\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChange,\n        placeholder: \"Name\",\n        name: \"name\",\n        value: formState.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChange,\n        placeholder: \"Message\",\n        name: \"message\",\n        value: formState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), state.messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"From: \", message.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", message.createdAt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, message.createdAt, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PeerToPeer, \"crLrbokZV8YuC1HmzpsZEm86ipk=\");\n\n_c = PeerToPeer;\nexport default PeerToPeer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerToPeer\");","map":{"version":3,"sources":["/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/src/components/pages/p2ptest.jsx"],"names":["useEffect","useState","useReducer","Gun","gun","peers","initialState","messages","reducer","state","message","NavBar","PeerToPeer","formState","setForm","name","dispatch","get","map","on","m","createdAt","saveMessage","set","Date","now","onChange","e","target","value","padding"],"mappings":"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","sourcesContent":["import { useEffect, useState, useReducer } from 'react'\nimport Gun from 'gun'\n\n// initialize gun locally\nconst gun = Gun({\n  peers: [\n    'http://localhost:3030/gun'\n  ]\n})\n\n// create the initial state to hold the messages\nconst initialState = {\n  messages: []\n}\n\n// Create a reducer that will update the messages array\nfunction reducer(state, message) {\n  return {\n    messages: [message, ...state.messages]\n  }\n}\nimport NavBar from \"../parts/NavBar\";\n\nconst PeerToPeer = () => {\n    /// the form state manages the form input for creating a new message\n    const [formState, setForm] = useState({\n        name: '', message: ''\n      })\n    \n      // initialize the reducer & state for holding the messages array\n      const [state, dispatch] = useReducer(reducer, initialState)\n    \n      // when the app loads, fetch the current messages and load them into the state\n      // this also subscribes to new data as it changes and updates the local state\n      useEffect(() => {\n        const messages = gun.get('messages')\n        messages.map().on(m => {\n          dispatch({\n            name: m.name,\n            message: m.message,\n            createdAt: m.createdAt\n          })\n        })\n      }, [])\n    \n      // set a new message in gun, update the local state to reset the form field\n      function saveMessage() {\n        const messages = gun.get('messages')\n        messages.set({\n          name: formState.name,\n          message: formState.message,\n          createdAt: Date.now()\n        })\n        setForm({\n          name: '', message: ''\n        })\n      }\n    \n      // update the form state as the user types\n      function onChange(e) {\n        setForm({ ...formState, [e.target.name]: e.target.value  })\n      }\n    \n      return (\n          <>\n            <NavBar />\n            <div style={{ padding: 30 }}>\n                <input\n                    onChange={onChange}\n                    placeholder=\"Name\"\n                    name=\"name\"\n                    value={formState.name}\n                />\n                <input\n                    onChange={onChange}\n                    placeholder=\"Message\"\n                    name=\"message\"\n                    value={formState.message}\n                />\n                <button onClick={saveMessage}>Send Message</button>\n                {\n                    state.messages.map(message => (\n                    <div key={message.createdAt}>\n                        <h2>{message.message}</h2>\n                        <h3>From: {message.name}</h3>\n                        <p>Date: {message.createdAt}</p>\n                    </div>\n                    ))\n                }\n            </div>\n          </>\n      )\n}\n\nexport default PeerToPeer;"]},"metadata":{},"sourceType":"module"}