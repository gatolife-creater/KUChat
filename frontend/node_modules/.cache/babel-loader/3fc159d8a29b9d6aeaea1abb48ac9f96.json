{"ast":null,"code":"import _defineProperty from\"/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{useEffect,useState,useReducer}from'react';import Gun from'gun';import NavBar from\"../parts/NavBar\";// initialize gun locally\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var gun=Gun({peers:['http://localhost:3007/gun']});// create the initial state to hold the messages\nvar initialState={messages:[]};// Create a reducer that will update the messages array\nfunction reducer(state,message){return{messages:[message].concat(_toConsumableArray(state.messages))};}var PeerToPeer=function PeerToPeer(){/// the form state manages the form input for creating a new message\nvar _useState=useState({name:'',message:''}),_useState2=_slicedToArray(_useState,2),formState=_useState2[0],setForm=_useState2[1];// initialize the reducer & state for holding the messages array\nvar _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// when the app loads, fetch the current messages and load them into the state\n// this also subscribes to new data as it changes and updates the local state\nuseEffect(function(){var messages=gun.get('messages');messages.map().on(function(m){dispatch({name:m.name,message:m.message,createdAt:m.createdAt});});},[]);// set a new message in gun, update the local state to reset the form field\nfunction saveMessage(){var messages=gun.get('messages');messages.set({name:formState.name,message:formState.message,createdAt:Date.now()});setForm({name:'',message:''});}// update the form state as the user types\nfunction onChange(e){setForm(_objectSpread(_objectSpread({},formState),{},_defineProperty({},e.target.name,e.target.value)));}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(NavBar,{}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsxs(\"div\",{style:{padding:30},children:[/*#__PURE__*/_jsx(\"input\",{onChange:onChange,placeholder:\"Name\",name:\"name\",value:formState.name}),/*#__PURE__*/_jsx(\"input\",{onChange:onChange,placeholder:\"Message\",name:\"message\",value:formState.message}),/*#__PURE__*/_jsx(\"button\",{onClick:saveMessage,children:\"Send Message\"}),state.messages.map(function(message){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:message.message}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"From: \",message.name]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Date: \",message.createdAt]})]},message.createdAt);})]})})]});};export default PeerToPeer;","map":{"version":3,"sources":["/Users/kamei/Documents/Projects/Programs/Blockchain Project/KUChat/frontend/src/components/pages/p2ptest.jsx"],"names":["useEffect","useState","useReducer","Gun","NavBar","gun","peers","initialState","messages","reducer","state","message","PeerToPeer","name","formState","setForm","dispatch","get","map","on","m","createdAt","saveMessage","set","Date","now","onChange","e","target","value","padding"],"mappings":"6oBAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,UAA9B,KAAgD,OAAhD,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CAGA;6IACA,GAAMC,CAAAA,GAAG,CAAGF,GAAG,CAAC,CACdG,KAAK,CAAE,CACL,2BADK,CADO,CAAD,CAAf,CAMA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,QAAQ,CAAE,EADS,CAArB,CAIA;AACA,QAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwBC,OAAxB,CAAiC,CAC/B,MAAO,CACLH,QAAQ,EAAGG,OAAH,4BAAeD,KAAK,CAACF,QAArB,EADH,CAAP,CAGD,CAED,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB;AACA,cAA6BX,QAAQ,CAAC,CAClCY,IAAI,CAAE,EAD4B,CACxBF,OAAO,CAAE,EADe,CAAD,CAArC,wCAAOG,SAAP,eAAkBC,OAAlB,eAIE;AACA,gBAA0Bb,UAAU,CAACO,OAAD,CAAUF,YAAV,CAApC,4CAAOG,KAAP,iBAAcM,QAAd,iBAEA;AACA;AACAhB,SAAS,CAAC,UAAM,CACd,GAAMQ,CAAAA,QAAQ,CAAGH,GAAG,CAACY,GAAJ,CAAQ,UAAR,CAAjB,CACAT,QAAQ,CAACU,GAAT,GAAeC,EAAf,CAAkB,SAAAC,CAAC,CAAI,CACrBJ,QAAQ,CAAC,CACPH,IAAI,CAAEO,CAAC,CAACP,IADD,CAEPF,OAAO,CAAES,CAAC,CAACT,OAFJ,CAGPU,SAAS,CAAED,CAAC,CAACC,SAHN,CAAD,CAAR,CAKD,CAND,EAOD,CATQ,CASN,EATM,CAAT,CAWA;AACA,QAASC,CAAAA,WAAT,EAAuB,CACrB,GAAMd,CAAAA,QAAQ,CAAGH,GAAG,CAACY,GAAJ,CAAQ,UAAR,CAAjB,CACAT,QAAQ,CAACe,GAAT,CAAa,CACXV,IAAI,CAAEC,SAAS,CAACD,IADL,CAEXF,OAAO,CAAEG,SAAS,CAACH,OAFR,CAGXU,SAAS,CAAEG,IAAI,CAACC,GAAL,EAHA,CAAb,EAKAV,OAAO,CAAC,CACNF,IAAI,CAAE,EADA,CACIF,OAAO,CAAE,EADb,CAAD,CAAP,CAGD,CAED;AACA,QAASe,CAAAA,QAAT,CAAkBC,CAAlB,CAAqB,CACnBZ,OAAO,gCAAMD,SAAN,wBAAkBa,CAAC,CAACC,MAAF,CAASf,IAA3B,CAAkCc,CAAC,CAACC,MAAF,CAASC,KAA3C,GAAP,CACD,CAED,mBACI,wCACE,KAAC,MAAD,IADF,cAEE,mCACA,aAAK,KAAK,CAAE,CAAEC,OAAO,CAAE,EAAX,CAAZ,wBACI,cACI,QAAQ,CAAEJ,QADd,CAEI,WAAW,CAAC,MAFhB,CAGI,IAAI,CAAC,MAHT,CAII,KAAK,CAAEZ,SAAS,CAACD,IAJrB,EADJ,cAOI,cACI,QAAQ,CAAEa,QADd,CAEI,WAAW,CAAC,SAFhB,CAGI,IAAI,CAAC,SAHT,CAII,KAAK,CAAEZ,SAAS,CAACH,OAJrB,EAPJ,cAaI,eAAQ,OAAO,CAAEW,WAAjB,0BAbJ,CAeQZ,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmB,SAAAP,OAAO,qBAC1B,oCACI,oBAAKA,OAAO,CAACA,OAAb,EADJ,cAEI,+BAAWA,OAAO,CAACE,IAAnB,GAFJ,cAGI,8BAAUF,OAAO,CAACU,SAAlB,GAHJ,GAAUV,OAAO,CAACU,SAAlB,CAD0B,EAA1B,CAfR,GADA,EAFF,GADJ,CA+BL,CAvED,CAyEA,cAAeT,CAAAA,UAAf","sourcesContent":["import { useEffect, useState, useReducer } from 'react'\nimport Gun from 'gun'\nimport NavBar from \"../parts/NavBar\";\n\n\n// initialize gun locally\nconst gun = Gun({\n  peers: [\n    'http://localhost:3007/gun'\n  ]\n})\n\n// create the initial state to hold the messages\nconst initialState = {\n  messages: []\n}\n\n// Create a reducer that will update the messages array\nfunction reducer(state, message) {\n  return {\n    messages: [message, ...state.messages]\n  }\n}\n\nconst PeerToPeer = () => {\n    /// the form state manages the form input for creating a new message\n    const [formState, setForm] = useState({\n        name: '', message: ''\n      })\n    \n      // initialize the reducer & state for holding the messages array\n      const [state, dispatch] = useReducer(reducer, initialState)\n    \n      // when the app loads, fetch the current messages and load them into the state\n      // this also subscribes to new data as it changes and updates the local state\n      useEffect(() => {\n        const messages = gun.get('messages')\n        messages.map().on(m => {\n          dispatch({\n            name: m.name,\n            message: m.message,\n            createdAt: m.createdAt\n          })\n        })\n      }, [])\n    \n      // set a new message in gun, update the local state to reset the form field\n      function saveMessage() {\n        const messages = gun.get('messages')\n        messages.set({\n          name: formState.name,\n          message: formState.message,\n          createdAt: Date.now()\n        })\n        setForm({\n          name: '', message: ''\n        })\n      }\n    \n      // update the form state as the user types\n      function onChange(e) {\n        setForm({ ...formState, [e.target.name]: e.target.value  })\n      }\n    \n      return (\n          <>\n            <NavBar />\n            <main>\n            <div style={{ padding: 30 }}>\n                <input\n                    onChange={onChange}\n                    placeholder=\"Name\"\n                    name=\"name\"\n                    value={formState.name}\n                />\n                <input\n                    onChange={onChange}\n                    placeholder=\"Message\"\n                    name=\"message\"\n                    value={formState.message}\n                />\n                <button onClick={saveMessage}>Send Message</button>\n                {\n                    state.messages.map(message => (\n                    <div key={message.createdAt}>\n                        <h2>{message.message}</h2>\n                        <h3>From: {message.name}</h3>\n                        <p>Date: {message.createdAt}</p>\n                    </div>\n                    ))\n                }\n            </div>\n            </main>\n          </>\n      )\n}\n\nexport default PeerToPeer;"]},"metadata":{},"sourceType":"module"}