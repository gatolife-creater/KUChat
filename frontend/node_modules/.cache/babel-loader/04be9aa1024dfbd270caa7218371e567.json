{"ast":null,"code":"var _jsxFileName = \"/Users/kamei/Desktop/Programs/Blockchain Project/KUChat/frontend/src/components/parts/QRCodeReader.jsx\";\nimport React, { Component } from \"react\";\nimport { QrReader } from \"react-qr-reader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass QRCodeReader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      result: \"No result\"\n    };\n\n    this.handleScan = data => {\n      if (data) {\n        this.setState({\n          result: data\n        });\n        window.location.href = `/transaction?address=${this.state.result.text}`;\n      }\n    };\n\n    this.handleError = err => {\n      console.error(err);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(QrReader, {\n        delay: 300,\n        constraints: {\n          facingMode: \"environment\"\n        },\n        onError: this.handleError,\n        onResult: this.handleScan,\n        videoId: \"qr-code-reader\",\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default QRCodeReader;","map":{"version":3,"sources":["/Users/kamei/Desktop/Programs/Blockchain Project/KUChat/frontend/src/components/parts/QRCodeReader.jsx"],"names":["React","Component","QrReader","QRCodeReader","state","result","handleScan","data","setState","window","location","href","text","handleError","err","console","error","render","facingMode","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;;AAEA,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCG,KADmC,GAC3B;AACNC,MAAAA,MAAM,EAAE;AADF,KAD2B;;AAAA,SAKnCC,UALmC,GAKrBC,IAAD,IAAU;AACrB,UAAIA,IAAJ,EAAU;AACR,aAAKC,QAAL,CAAc;AACZH,UAAAA,MAAM,EAAEE;AADI,SAAd;AAGAE,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwB,wBAAuB,KAAKP,KAAL,CAAWC,MAAX,CAAkBO,IAAK,EAAtE;AACD;AACF,KAZkC;;AAAA,SAanCC,WAbmC,GAapBC,GAAD,IAAS;AACrBC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAfkC;AAAA;;AAgBnCG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,KAAK,EAAE,GADT;AAEE,QAAA,WAAW,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAFf;AAGE,QAAA,OAAO,EAAE,KAAKL,WAHhB;AAIE,QAAA,QAAQ,EAAE,KAAKP,UAJjB;AAKE,QAAA,OAAO,EAAC,gBALV;AAME,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE;AAAT;AANT;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAYD;;AA7BkC;;AA+BrC,eAAehB,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { QrReader } from \"react-qr-reader\";\n\nclass QRCodeReader extends Component {\n  state = {\n    result: \"No result\",\n  };\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState({\n        result: data,\n      });\n      window.location.href = `/transaction?address=${this.state.result.text}`;\n    }\n  };\n  handleError = (err) => {\n    console.error(err);\n  };\n  render() {\n    return (\n      <>\n        <QrReader\n          delay={300}\n          constraints={{ facingMode: \"environment\" }}\n          onError={this.handleError}\n          onResult={this.handleScan}\n          videoId=\"qr-code-reader\"\n          style={{ width: \"100%\" }}\n        />\n      </>\n    );\n  }\n}\nexport default QRCodeReader;\n"]},"metadata":{},"sourceType":"module"}